// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client types
//
// Command:
// $ goa gen github.com/jt/books/design

package client

import (
	books "github.com/jt/books/gen/books"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "books" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Book cover image URL
	Cover *string `form:"cover,omitempty" json:"cover,omitempty" xml:"cover,omitempty"`
	// Published date of the book
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// UpdateRequestBody is the type of the "books" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Book cover image URL
	Cover *string `form:"cover,omitempty" json:"cover,omitempty" xml:"cover,omitempty"`
	// Published date of the book
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// ItemsResponseBody is the type of the "books" service "items" endpoint HTTP
// response body.
type ItemsResponseBody []*BookResponse

// ItemResponseBody is the type of the "books" service "item" endpoint HTTP
// response body.
type ItemResponseBody struct {
	// ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Book cover image URL
	Cover *string `form:"cover,omitempty" json:"cover,omitempty" xml:"cover,omitempty"`
	// Published date of the book
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// CreateResponseBody is the type of the "books" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Book cover image URL
	Cover *string `form:"cover,omitempty" json:"cover,omitempty" xml:"cover,omitempty"`
	// Published date of the book
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// UpdateResponseBody is the type of the "books" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Book cover image URL
	Cover *string `form:"cover,omitempty" json:"cover,omitempty" xml:"cover,omitempty"`
	// Published date of the book
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// ItemNotFoundResponseBody is the type of the "books" service "item" endpoint
// HTTP response body for the "not_found" error.
type ItemNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "books" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "books" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BookResponse is used to define fields on response body types.
type BookResponse struct {
	// ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Book cover image URL
	Cover *string `form:"cover,omitempty" json:"cover,omitempty" xml:"cover,omitempty"`
	// Published date of the book
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "books" service.
func NewCreateRequestBody(p *books.CreateBookPayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Title:       p.Title,
		Author:      p.Author,
		Cover:       p.Cover,
		PublishedAt: p.PublishedAt,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "books" service.
func NewUpdateRequestBody(p *books.UpdateBookPayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Title:       p.Title,
		Author:      p.Author,
		Cover:       p.Cover,
		PublishedAt: p.PublishedAt,
	}
	return body
}

// NewItemsBookOK builds a "books" service "items" endpoint result from a HTTP
// "OK" response.
func NewItemsBookOK(body []*BookResponse) []*books.Book {
	v := make([]*books.Book, len(body))
	for i, val := range body {
		v[i] = unmarshalBookResponseToBooksBook(val)
	}

	return v
}

// NewItemBookOK builds a "books" service "item" endpoint result from a HTTP
// "OK" response.
func NewItemBookOK(body *ItemResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		Cover:       body.Cover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// NewItemNotFound builds a books service item endpoint not_found error.
func NewItemNotFound(body *ItemNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookCreated builds a "books" service "create" endpoint result from
// a HTTP "Created" response.
func NewCreateBookCreated(body *CreateResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		Cover:       body.Cover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// NewUpdateBookOK builds a "books" service "update" endpoint result from a
// HTTP "OK" response.
func NewUpdateBookOK(body *UpdateResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		Cover:       body.Cover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// NewUpdateNotFound builds a books service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteNotFound builds a books service delete endpoint not_found error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateItemNotFoundResponseBody runs the validations defined on
// item_not_found_response_body
func ValidateItemNotFoundResponseBody(body *ItemNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
