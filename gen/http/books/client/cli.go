// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jt/books/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	books "github.com/jt/books/gen/books"
	goa "goa.design/goa/v3/pkg"
)

// BuildShowPayload builds the payload for the books show endpoint from CLI
// flags.
func BuildShowPayload(booksShowID string) (*books.ShowPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksShowID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.ShowPayload{}
	v.ID = id

	return v, nil
}

// BuildCreatePayload builds the payload for the books create endpoint from CLI
// flags.
func BuildCreatePayload(booksCreateBody string) (*books.CreateBookPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(booksCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Ut maiores omnis alias et sapiente.\",\n      \"cover\": \"QmFzZTY0IG9mIHRoZSBCb29rIGNvdmVyIGltYWdl\",\n      \"published_at\": \"2006-01-02T15:04:05Z\",\n      \"title\": \"Iusto velit nisi asperiores quae laboriosam blanditiis.\"\n   }'")
		}
		if body.PublishedAt != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.published_at", *body.PublishedAt, goa.FormatDateTime))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &books.CreateBookPayload{
		Title:       body.Title,
		Author:      body.Author,
		Cover:       body.Cover,
		PublishedAt: body.PublishedAt,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the books update endpoint from CLI
// flags.
func BuildUpdatePayload(booksUpdateBody string, booksUpdateID string) (*books.UpdateBookPayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(booksUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Provident et est deserunt molestiae eveniet culpa.\",\n      \"cover\": \"QmFzZTY0IG9mIHRoZSBCb29rIGNvdmVyIGltYWdl\",\n      \"published_at\": \"2006-01-02T15:04:05Z\",\n      \"title\": \"Earum ipsa.\"\n   }'")
		}
		if body.PublishedAt != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.published_at", *body.PublishedAt, goa.FormatDateTime))
		}
		if err != nil {
			return nil, err
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksUpdateID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.UpdateBookPayload{
		Title:       body.Title,
		Author:      body.Author,
		Cover:       body.Cover,
		PublishedAt: body.PublishedAt,
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the books delete endpoint from CLI
// flags.
func BuildDeletePayload(booksDeleteID string) (*books.DeletePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksDeleteID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.DeletePayload{}
	v.ID = id

	return v, nil
}
