// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jt/books/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	books "github.com/jt/books/gen/books"
)

// BuildItemPayload builds the payload for the books item endpoint from CLI
// flags.
func BuildItemPayload(booksItemID string) (*books.ItemPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksItemID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.ItemPayload{}
	v.ID = id

	return v, nil
}

// BuildCreatePayload builds the payload for the books create endpoint from CLI
// flags.
func BuildCreatePayload(booksCreateBody string) (*books.CreateBookPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(booksCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Ut sed ut.\",\n      \"cover\": \"Accusamus magni ex.\",\n      \"published_at\": \"Non corporis quis esse ratione laboriosam.\",\n      \"title\": \"Assumenda molestias nihil illo dolorem eveniet.\"\n   }'")
		}
	}
	v := &books.CreateBookPayload{
		Title:       body.Title,
		Author:      body.Author,
		Cover:       body.Cover,
		PublishedAt: body.PublishedAt,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the books update endpoint from CLI
// flags.
func BuildUpdatePayload(booksUpdateBody string, booksUpdateID string) (*books.UpdateBookPayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(booksUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Natus nisi.\",\n      \"cover\": \"Autem ratione quos maiores aut.\",\n      \"published_at\": \"Repellendus eius itaque doloribus.\",\n      \"title\": \"Quae voluptas esse ea id assumenda a.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksUpdateID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.UpdateBookPayload{
		Title:       body.Title,
		Author:      body.Author,
		Cover:       body.Cover,
		PublishedAt: body.PublishedAt,
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the books delete endpoint from CLI
// flags.
func BuildDeletePayload(booksDeleteID string) (*books.DeletePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksDeleteID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.DeletePayload{}
	v.ID = id

	return v, nil
}
