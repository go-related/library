// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books endpoints
//
// Command:
// $ goa gen github.com/jt/books/design

package books

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "books" service endpoints.
type Endpoints struct {
	Items  goa.Endpoint
	Item   goa.Endpoint
	Create goa.Endpoint
	Update goa.Endpoint
	Delete goa.Endpoint
}

// NewEndpoints wraps the methods of the "books" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Items:  NewItemsEndpoint(s),
		Item:   NewItemEndpoint(s),
		Create: NewCreateEndpoint(s),
		Update: NewUpdateEndpoint(s),
		Delete: NewDeleteEndpoint(s),
	}
}

// Use applies the given middleware to all the "books" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Items = m(e.Items)
	e.Item = m(e.Item)
	e.Create = m(e.Create)
	e.Update = m(e.Update)
	e.Delete = m(e.Delete)
}

// NewItemsEndpoint returns an endpoint function that calls the method "items"
// of service "books".
func NewItemsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Items(ctx)
	}
}

// NewItemEndpoint returns an endpoint function that calls the method "item" of
// service "books".
func NewItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ItemPayload)
		return s.Item(ctx, p)
	}
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "books".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateBookPayload)
		return s.Create(ctx, p)
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "books".
func NewUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateBookPayload)
		return s.Update(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "books".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeletePayload)
		return nil, s.Delete(ctx, p)
	}
}
